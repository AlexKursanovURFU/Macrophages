from math import log
from constants import sizeStates, sizeConstants
from typing import Tuple, List

def initialize_model_states() -> List[float]:
    """Инициализирует и возвращает начальные состояния модели.
    
    Returns:
        List[float]: Список начальных значений переменных состояния модели
    """
    return [
        -49.7094187908202,     # Vm - Мембранный потенциал [mV]
        0.0462303183096481,     # m - Активационная переменная Na+ каналов
        0.192515363116553,      # h - Инактивационная переменная Na+ каналов
        0.0797182955833868,     # j - Медленная инактивация Na+ каналов
        0.949023698965401,      # d - Активация L-типа Ca2+ каналов
        0.000160310601192365,   # f - Инактивация L-типа Ca2+ каналов
        0.143642247226618,      # fCa - Ca2+-зависимая инактивация
        0.0243210273637729,     # Xr1 - Активация быстрого IKr
        0.0157156121147801,     # Xr2 - Инактивация быстрого IKr
        0.00179250298710316,    # Xs - Активация медленного IKs
        0.975550840189597,      # s - Активация IK1
        0.774394220125623,      # r - Инактивация IK1
        0.0296516611999521,     # Ca_i - Внутриклеточный Ca2+ [mM]
        0.899732315818241,      # Ca_ss - Субмембранный Ca2+ [mM]
        0.190111737767474,      # Ca_SR - Ca2+ в ретикулуме [mM]
        0.476404610622697,      # R - Состояние рианодинового рецептора
        0.542303657353244,      # O - Открытое состояние рецептора
        0.550559577208797,      # I - Инактивированное состояние
        0.567277036232041,      # RI - Состояние рецептора
        0.000184969821581882,   # Na_i - Внутриклеточный Na+ [mM]
        1.11092514657408,       # K_i - Внутриклеточный K+ [mM]
        0.296249516481577,       # Ca_jsr - Ca2+ в junctional SR [mM]
        0.0356473236675985,     # Ca_nsr - Ca2+ в network SR [mM]
        0.443317425115817,       # F1 - Фосфорилированные CaMKII
        0.491718960234865,       # F2 - Автофосфорилированные CaMKII
        0.0723007987059414,      # F3 - Связанные с CaM CaMKII
        0.0630771339141488,      # FCaMK - Активные CaMKII
        0.261430602900137,       # E - Напряжение активации
        4.1497704886823e-5       # H - Переменная для ICl,Ca
    ]

def initialize_model_constants() -> List[float]:
    """Инициализирует и возвращает константы модели с расчетом производных параметров.
    
    Returns:
        List[float]: Список констант модели с рассчитанными параметрами
    """
    # Базовые константы модели
    constants = [
        8314.472,       # R - Универсальная газовая постоянная [J/(mol*K)]
        310,            # T - Температура [K]
        96485.3415,     # F - Постоянная Фарадея [C/mol]
        4e-5,           # Cm - Емкость мембраны [uF]
        0.001,          # V_c - Объем цитоплазмы [uL]
        0,              # stim_start - Время начала стимуляции [ms]
        0.0035,         # stim_period - Период стимуляции [ms]
        140,            # Na_o - Внеклеточный Na+ [mM]
        5.4,            # K_o - Внеклеточный K+ [mM]
        0,              # Ca_o - Внеклеточный Ca2+ [mM]
        0.0012,         # g_Na - Проводимость для INa [uS]
        -22.5,          # E_Na - Реверсивный потенциал Na+ [mV]
        0.14268,        # g_CaL - Проводимость для ICaL [uS]
        8,              # Ca_o - Внеклеточный Ca2+ [mM]
        2.14455,        # g_Kr - Проводимость для IKr [uS]
        0.1369,        # g_Ks - Проводимость для IKs [uS]
        0.4315,         # g_K1 - Проводимость для IK1 [uS]
        0,              # g_NaCa - Проводимость для INaCa [uS]
        0.0207,         # k_NaCa - Константа для INaCa [uS]
        395.3,         # g_NaK - Проводимость для INaK [uS]
        2.289,         # k_NaK - Константа для INaK [mM]
        26.44,         # g_to - Проводимость для Ito [uS]
        26.44,         # g_pCa - Проводимость для IpCa [uS]
        4.663,         # g_pK - Проводимость для IpK [uS]
        1628,          # g_bNa - Фоновая проводимость Na+ [uS]
        561.4,         # g_bCa - Фоновая проводимость Ca2+ [uS]
        3.663,         # g_bK - Фоновая проводимость K+ [uS]
        2,             # n - Коэффициент для INaK
        140,           # Na_o_ref - Референсный Na+ [mM]
        0,             # Ca_o_ref - Референсный Ca2+ [mM]
        1e-5,          # K_mNa - Константа Михаэлиса для Na+ [mM]
        0.009,         # K_mK - Константа Михаэлиса для K+ [mM]
        62,            # K_mCa - Константа Михаэлиса для Ca2+ [mM]
        -15,           # V_shift - Сдвиг напряжения [mV]
        -5,            # V_half - Половина напряжения активации [mV]
        -5,            # V_half_act - Половина напряжения активации [mV]
        -5,            # V_half_inact - Половина напряжения инактивации [mV]
        0,             # V_half_fCa - Половина напряжения для fCa [mV]
        -37.4,         # V_half_f - Половина напряжения для f [mV]
        0.0001,        # alpha_f - Константа скорости для f
        0.0198,        # beta_f - Константа скорости для f
        0.00035,       # g - Константа для ICaL
        73.1,          # tau_fCa - Временная константа fCa [ms]
        3.7,           # gamma - Коэффициент для INaCa
        3.18872e-6,    # K_up - Константа SERCA [mM/ms]
        1500,          # V_max_up - Макс. скорость SERCA [mM/ms]
        0.0006,        # k_leak - Константа утечки из SR [1/ms]
        0.06           # k_rel - Константа выхода Ca2+ [1/ms]
    ]
    
    # Расчет производных констант
    RTF = (constants[0] * constants[1]) / constants[2]  # RT/F [mV]
    constants.extend([
        RTF,  # constants[48]
        constants[28] / (constants[23] + constants[28]),  # Коэффициент IpK [49]
        RTF * log(constants[8] / constants[7]),  # E_K [50]
        RTF * log(constants[28] / constants[13]),  # E_Na [51]
        RTF * log(constants[8] / constants[7]),  # E_K [52]
        constants[13] / (constants[21] + constants[13]),  # Коэффициент Ito [53]
        0.0116000 * constants[44],  # Константа утечки Ca2+ [54]
        0.00120000 * constants[44],  # Константа утечки Ca2+ [55]
        0.0100000 * constants[44],   # Константа утечки Ca2+ [56]
        0.460000 * constants[44] - 0.0100000 * constants[44]  # Константа утечки Ca2+ [57]
    ])
    
    return constants

def init_model_parameters() -> Tuple[List[float], List[float]]:
    """Основная функция инициализации параметров модели.
    
    Returns:
        Tuple[List[float], List[float]]: Кортеж (states, constants)
    """
    states = initialize_model_states()
    constants = initialize_model_constants()
    
    # Проверка размеров массивов
    if len(states) != sizeStates:
        raise ValueError(f"Неверный размер states: ожидалось {sizeStates}, получено {len(states)}")
    if len(constants) != sizeConstants:
        raise ValueError(f"Неверный размер constants: ожидалось {sizeConstants}, получено {len(constants)}")
    
    return states, constants